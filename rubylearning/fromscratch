puts "program in execution"


END   {
	puts "programs has ended"
      }
BEGIN {
	puts "program not started yet"
      }

ruby test.rb
program not started yet
program in execution
programs has ended

= begin
This is a comment.
This is a comment, too.
This is a comment, too.
I said that already.
= end


**GLOBAAL VARIABLES : 

puts "testing global variable"
$global="i am global variable"
class A
   def   display
      puts "value in class A is #$global"
   end
end

class B
   def   display2
      puts "value in class B is #$global"
   end
end

a1=A.new
a1.display
b1=B.new
b1.display2

ruby test.rb
testing global variable
value in class A is i am global variable
value in class B is i am global variable


**CLASS VARIABLES :

class Students
   @@student_name="tarun"
   def     self.get_name
	   @@student_name
   end
end
puts Students.get_name


	** One major issue with class valriables is inhertitance.	
	** When we set a class variable, it is set for the superclass and all of its subclasses.


**INSTANCE VARIABLES  :
	** The value of an instant variable can be different for the inherited classes.
	** They change from object to object.	

**CONSTANTS : 
class Example
   VAR1 = 100
   VAR2 = 200
   def show
      puts "Value of first Constant is #{VAR1}"
      puts "Value of second Constant is #{VAR2}"
   end
end
object = Example.new()
object.show

ruby test.rb
Value of first Constant is 100
Value of second Constant is 200

** We can substitute the value of any ruby expression into a string using #{ }.
puts "addition value #{20+30}"

ruby test.rb
addition value 50

**DEFINED? OPERATOR :

a=10
puts defined? a
puts defined? puts
puts defined? super

ruby test.rb
local-variable
method
#nil

***** Largest of three numbers

puts "enter three numbers"
a=gets.chomp.to_i
b=gets.chomp.to_i
c=gets.chomp.to_i

if a>b && a>c
   puts "a is largest"
 elsif b>a && b>c
   puts "b is largest"
 elsif c>a && c>a
   puts "c is largest"
end

ruby test.rb
enter three numbers
453
234
356
a is largest

WhILE LOOP :

puts "enter the limit"
limit=gets.chomp.to_i
i=0
while i <=limit do
   puts i
   i+=1	
end

ruby test.rb
enter the limit
5
0
1
2
3
4
5

FOR LOOP : 

puts "enter the limit"
limit=gets.chomp.to_i
i=0
for i in 0..limit do
   puts i
   i+=1	
end

ruby test.rb
enter the limit
3
0
1
2
3

EACH LOOP :
(0..5).each do |i|
   		 puts i
	    end 

ruby test.rb
0
1
2
3
4
5


**METHODS : 

class A
def method (a,b)
   puts a
   puts b
end
end
a1=A.new
a1.method(2,3)

ruby test.rb
2
3

**METHOD WITH RETURN STATEMENT 

class A
def method (a,b)
   a
   b
   return a,b
end
end
a1=A.new
puts a1.method(2,3)
puts a1.method(2,3).class	

ruby test.rb
2
3
Array

**METHOD WITH VARIABLE NO OF PARAMETERS

class A
def method (*names)
   puts "total no of paramteres passed are #{names.length}"
   return names
end
end
a1=A.new
puts a1.method(2,3,45)
puts a1.method("tarun","garg")

ruby test.rb
total no of paramteres passed are 3
2
3
45
total no of paramteres passed are 2
tarun
garg

** PASSING METHODS AS PARAMTERS 

def add(x,y)
   return x+y
end
def sub(x,y)
   return x-y
end
def mul(x,y)
   return x*y
end
puts mul(add(20,30),sub(45,20))

ruby test.rb
1250

def add(x,y)
   return x+y
end
def sub(x,y)
   return x-y
end
def mul(x,y)
   return x*y
end
puts add(mul(2,3),mul(add(4,5),sub(6,2)))   

ruby test.rb
42

** RECURSION

def add(x)
   puts x*2
   if x<10 
   add(x+2)	
   end
end
add(11)
add(8)

ruby test.rb
22
16
20

***** ARRAYS ******

ITERATING OVER ARRAYS	:	
-> EACH METHOD	: Array has an 'each' method which decides what element should be iterated over and how. In case of Array's each 			  all elements in the Array instance are yielded to supplied block in sequence.
		* Each method takes two arguments - an element and a block.
		* The element contained inside the block is similar to a placeholder used in the block to represent each element of the array 			  in turn.
		* Block is the line of code that is executed on each of the array items.

arr = [1, 2, 3, 4, 5]
arr.each { |a| puts a+=3}

ruby test.rb
4
5
6
7
8

-> REVERSE_EACH METHOD	:   It will iterate over the array elements in reverse order.

-> MAP METHOD	:	It will create a new array based on oeiginal array but with values modified by the supplied block.

arr = [1, 2, 3, 4, 5]
arr.map{ |a| puts a+=3}
puts arr

ruby test.rb
4
5
6
7
8
1
2
3
4
5

SELECTING ITEMS from an Array : 

-> DESTRUCTIVE METHOD		:	modifies the array on which the method is called on.
-> NON DESTRUCTIVE METHOD	:	returns a new array with selected items and leaves the oroginal array unchanged.

select , reject       =>   non-distructive
select! , reject!     =>   destructive

NON DESTRUCTIVE SELECT :

arr = [34, 41, 31, 14, 25]
puts arr.select { |a| a > 30}
puts "\n"
puts arr.reject { |a| a > 30}
puts "\n"
puts arr

ruby test.rb
34
41
31

14
25

34
41
31
14
25

DESTRUCTIVE SELECT :

arr = [34, 41, 31, 14, 25]
puts arr.select! { |a| a > 30}
puts "\n"
puts arr.reject! { |a| a > 30}
puts "\n"
puts arr

 ruby test.rb
34
41
31


PUBLIC CLASS METHODS	:	[]*args    =>   returns a new array populated with the given objects.

puts Array['2','hello']
puts "\n"
puts [1,'sad','34']
puts "\n"
puts Array.[](3,'bye')

ruby test.rb
2
hello

1
sad
34

3
bye


-> Passing array as paramter 
	first = ["tarun","garg"]
	second = Array.new(first)
	puts first .eql? second

	ruby test.rb
	true

->	new(size) {|index| block }	:   Here, an array of given size is created. Each element in this array is created by passing the 						    element's indeex to the given block and storing the return value.
	second = Array.new(3){|index| index*3}
	puts second
	
	ruby test.rb
	0
	3
	6

-> try_convert(obj)	:	this method tries to convert obj into array. It returns array on success and nil if the obj cannot be 					converted into arrat for any reason.

		puts Array.try_convert([11])
		puts Array.try_convert("12")

	ruby test.rb
	11
			// nil 


PUBLIC INSTANCE METHODS :	

-> SET-INTERSECTION	:	Returns a new array containing the common elements in both arrays and excluding the duplicate ones.
				The order is preserved from the oroginal array.

-> array * int      =>   new array
-> array * string   =>   new string

puts [1,2,3] * 3
puts [1,2,3] * "ad"

ruby test.rb
1
2
3
1
2
3
1
2
3
1ad2ad3

-> array1 + array2    =>    New Array
-> array1 - array2    =>    New Array

-> array1 <=> array2   =>    -1, 0, +1 or nil     // nil is returned if the two values are incomparable.
		       ** Two arrays are equal iff both of same length and have exactly same elements of same value.
-> array1 == array2    => returns boolean true or false

-> array[index]         = obj 				=> obj
-> array[start, length] = obj or other_array or nil 	=> obj or other_array or nil
-> array[range]         = obj or other_array or nil 	=> obj or other_array or nil

data = [1,2,3,"hello","tarun",6,"demo",9]
data[0]="zero"
data[2..4] = [2,3,4]
data[6] = "six"
puts data

ruby test.rb
zero
2
2
3
4
6
sixSearches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==.

Returns the first contained array that matches (that is, the first associated array), or nil if no match is found.


9

-> assoc(obj)	=>	new_array or nil : searches through an array whose elements are also arrays comparing obj with the first element of 						   each contained array using obj.==.	
					   Returns the first contained array that matches (that is, the first associated array), or nil if no 						   match is found.

array1 = [ "colors", "red", "blue", "green" ]
array2 = [ "letters", "a", "b", "c" ]
res = [ array1, array2]
puts res.assoc("colors")  
     
ruby test.rb
colors
red
blue
green

-> bsearch {|x| block } â†’ element   : binary search : can be used in two cases : a find minimum mode and find any mode. In either case, the 					      elements of the array must be sorted.
  In find minimum mode, the block must return true or false and there must be an index.

array = [ 1,2,5,45,34,2,32,56 ]
puts array.bsearch { |x| x>=20 }
puts array.bsearch { |x| x<=20 }

ruby test.rb
45


  In find any mode, the block must return a number and there must be two indices i and j (0<=i<=j<=array.size)
  **he block returns a positive number for array if 0 <= k < i,
  **the block returns zero for array if i <= k < j, and
  **the block returns a negative number for array if j <= k < array.size.

array = [ 1,2,5,45,34,2,32,56 ]
puts array.bsearch { |x| x>20 ; x%7==0 }

ruby test.rb
56

-> clear 	: removes all  elements from self.

-> collect { |item| block }   =>   new array			collect   =>  enumerator
    * invokes the given block once for each element of self. Creates a new array containing the values returned  by the block.

-> combination(n) { |c| block }  =>	 array
   combination(n)		 =>	 enumerator   : when invoked with a block, returns all combinations of length n from the array and 
							then returns the array itself. The implementation makes no gurantee about the order in
							which the combinaions are returned.

		a = [ 1,2,5,4,6 ]
		print a.combination(2).to_a
		print "\n"
		print a.combination(3).to_a
	
		ruby test.rb
		[[1, 2], [1, 5], [1, 4], [1, 6], [2, 5], [2, 4], [2, 6], [5, 4], [5, 6], [4, 6]]
		[[1, 2, 5], [1, 2, 4], [1, 2, 6], [1, 5, 4], [1, 5, 6], [1, 4, 6], [2, 5, 4], [2, 5, 6], [2, 4, 6], [5, 4, 6]]

-> concat(array2)   =>  new array : concats the contents of array2 into the current array.
-> count		:	returns the length of array.
->count(obj)		:	counts and returns the no of elements with values equla to obj.
->count {|item| block } :	counts and returns the no of elements for which the block returns true.

-> cycle(n)		:	calls the given block for each element 'n' times or for forever if nil is given.

a = [ 1,2,5,4,6 ]
puts a.cycle(3) { |x| puts x }

ruby test.rb
1
2
5
4
6
1
2
5
4
6
1
2
5
4
6

-> delete_at(index)	:	to delete an element at the particular index.

-> delete_if { |item| block }    :   deletes every element from self for which block returns true.

-> drop(n)		:	drop first n elements from the array.

-> drop_while { |item| block }   :   drop elements upto(not including) the first elementr for which the block returns false.

		a = [ 1,2,5,6 ]
		puts a.drop_while {|x| x<5 }

		ruby test.rb
		5
		6

-> each_index { |index| block }	:	same as each but passes the index of element instead of element itself.

-> fetch (index , default )	:	gives default value to element lying outside array bounds and prevents the error.
-> fetch (index) { |index| block } :    will execute the block only if invalid index is referenced.

-> fill (obj)	:	fills the array with object.

	a = [ "a", "b", "c", "d" ]
	puts a.fill("y", 0..1)  

	ruby test.rb
	y
	y
	c
	d

-> index (obj)		:	returns the index of the object in the array.
-> index { |item| block } : 	returns the index of first element of the array for which block returns true.

a = [ 12,234,23,43,14,56,45]
puts a.index(43)
puts a.index { |x| x ==234 }	

ruby test.rb
3
1

a = [ 1,2,5,6,34,25,123]
puts a.first
puts a.first(3)
puts a.last(3)
ruby test.rb

1
1
2
5
34
25
123

-> flatten / flatten(level) 

a = [ 1,2,5,6,34]
b=[4,52,8,[12,11]]
a=[a,b,4,5]
print "#{a.flatten} \n"
print a.flatten(1)

[1, 2, 5, 6, 34, 4, 52, 8, 12, 11, 4, 5] 
[1, 2, 5, 6, 34, 4, 52, 8, [12, 11], 4, 5]

-> flatten!

b=[4,52,8,[12,11]]
puts b.flatten!	

ruby test.rb
4
52
8
12
11

-> freeze 	:	 to freeze an array
-> frozen?	:	 returns true, if array is frozen.

b=[4,52,8,[12,11]]
b.freeze
puts b.frozen?	

ruby test.rb
true

-> replace(other_array)
a=[4,52,8,[12,11]]
print "#{a.replace([1,2,"hello",5])} \n"

ruby test.rb
[1, 2, "hello", 5] 

-> to_s
a=[4,52,8,[12,11]]

-> join(seperator=$)
a=["ab","bc","cd","ed","fg"]
print "#{a.join}\n"
print "#{a.join("--")}\n"

 ruby test.rb
abbccdedfg
ab--bc--cd--ed--fg

-> keep_if { |item| block }
a=["ab","bc","cd","ed","fg"]
print "#{a.keep_if {|i| i=="bc"}}\n"

ruby test.rb
["bc"]

-> permutation / permutation(n) 
a=[2,1,3,4,5]
print "#{a.permutation(3).to_a}\n"

ruby test.rb
[[2, 1, 3], [2, 1, 4], [2, 1, 5], [2, 3, 1], [2, 3, 4], [2, 3, 5], [2, 4, 1], [2, 4, 3], [2, 4, 5], [2, 5, 1], [2, 5, 3], [2, 5, 4], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 2], [1, 3, 4], [1, 3, 5], [1, 4, 2], [1, 4, 3], [1, 4, 5], [1, 5, 2], [1, 5, 3], [1, 5, 4], [3, 2, 1], [3, 2, 4], [3, 2, 5], [3, 1, 2], [3, 1, 4], [3, 1, 5], [3, 4, 2], [3, 4, 1], [3, 4, 5], [3, 5, 2], [3, 5, 1], [3, 5, 4], [4, 2, 1], [4, 2, 3], [4, 2, 5], [4, 1, 2], [4, 1, 3], [4, 1, 5], [4, 3, 2], [4, 3, 1], [4, 3, 5], [4, 5, 2], [4, 5, 1], [4, 5, 3], [5, 2, 1], [5, 2, 3], [5, 2, 4], [5, 1, 2], [5, 1, 3], [5, 1, 4], [5, 3, 2], [5, 3, 1], [5, 3, 4], [5, 4, 2], [5, 4, 1], [5, 4, 3]]

-> product(other_array)
a=[2,1,3,4,5]
print "#{ a.product([1,2])}\n"

ruby test.rb
[[2, 1], [2, 2], [1, 1], [1, 2], [3, 1], [3, 2], [4, 1], [4, 2], [5, 1], [5, 2]]

-> rassoc(obj) 

a = [ [ 1, "one"], [2, "two"], [3, "three"], ["ii", "two"] ]
puts a.rassoc("two") 
puts a.rassoc("3")

ruby test.rb
2
two
'nil'

-> rindex(obj) 		:	searches forward
 rindex {|item| block } :	searches backward

a=[1,2,3,4,4,4,5]
puts a.rindex(4)
puts a.rindex {|x| x=4}

ruby test.rb
5
6

-> rotate(n) / rotate!(n) : 

a=[1,2,3,4,4,4,5]
print a.rotate(1)
puts"\n"
print  a.rotate(-1)
puts "\n"

ruby test.rb
[2, 3, 4, 4, 4, 5, 1]
[5, 1, 2, 3, 4, 4, 4]

-> sample / sample(n)	:	select any random element(s) from the array.

a=[1,2,3,4,4,4,5]
print a.sample
puts"\n"
print  a.sample(3)
puts "\n"

ruby test.rb
2
[4, 1, 2]

ruby test.rb
4
[4, 3, 4]

-> shuffle	:	returns new array with shuffled elements.
-> sort		:	returns new array with sorted elements.

****** STRINGS :   

a="hello my name is tarun"
puts a.length
puts a["my"]
puts a["name"]
puts a[0]
puts a[10]
puts a[0..6]
puts a[0..a.length]
puts a[-2]
puts a[-4..a.length]

ruby test.rb
22
my
name
h
a
hello m
hello my name is tarun
u
arun

MULTILINE STRINGS :
puts "a
ab
abc"

puts %/ h
ell
o/

ruby test.rb
a
ab
abc
 h
ell
o


CONCATENATING STRINGS : 

puts "hello"+" "+"tarun"
puts "hello" " " "tarun"
puts "hello"<< " "<< "tarun"
puts "hello".concat(" ").concat("tarun")

ruby test.rb
hello tarun
hello tarun
hello tarun
hello tarun

COMPARING STRINGS  :

puts "abc"=="abc"
puts "abc"=="ABC"
puts "123"=="321"
puts "------"
puts "abc".eql?"abc"
puts "abc".eql?"ABC"
puts "123".eql?"321"
puts "------"
puts "abc".casecmp"abc"
puts "abc".casecmp"ABC"
puts "123".casecmp"321"

ruby test.rb
true
false
false
------
true
false
false
------
0
0
-1

-> Center(width,padstr="")

a="hello"
puts a.center(30,padstr="*")

************hello*************

Chop	:	returns string with the last character removed.

a="hello"
puts a.chop
puts "tarun".chop
puts "tarun\n\r".chop
puts "tarun\r\n\r".chop
puts "t".chop

ruby test.rb
hell
taru
tarun
tarun
'nil'
ruby test.rb
h*llo

->	gsub(pattern, replacement)	:	all occurences of pattern replaced by replacemnt. pattern can be regular expression.
->	gsub(pattern, hash)		:	if the matched text is one of the keys of hash, then its corresponding value replaces string.
->	gsub(patttern){|match| block}	:	

a="hello"
puts a.gsub("e","*")
puts a.gsub("ell","*")
puts a.gsub(/[aeiou]/,"*")
puts a.gsub(/[h][ae]/,"*")
puts a.gsub(/[l]{2}/,"*")
puts a.gsub(/[eo]/, 'e' => 3, 'o' => '*')
puts a.gsub(/[a-z]/,"*")

h*o
h*ll*
*llo
he*o
h3ll*
*****

-> hash 	:	returns a hash based on string length and values.
-> index(substring/regexp [offset]) 

a="hellov my name is tarun"
puts a.index("o")
puts a.index("ll")
puts a.index(/[ta]/)
puts a.index("a",12)

ruby test.rb
4
2
11
19

HASHES :

a={"a"=>100,"s"=>200}
b={"c"=>300,"s"=>400}
b.merge(a)
puts b.merge(a){|x,y,z| y-z }

ruby test.rb
{"c"=>300, "s"=>200, "a"=>100}

********************************* DATE & TIME *****************************

.inspect	:	get current date and time

t=Time.new
puts t.inspect

ruby test.rb
2018-04-10 14:52:12 +0530

*** Getting components of date and time

-> year		:	year of the date
-> month 	:	month of the date
-> day		:	day of the date
-> wday		:	day of the week
-> yday		:	day of the year
-> hour		:	current hour (24 hour fromat)
-> min		:	current minute
-> sec		:	current second
-> usec		: 	current second in microsecond
-> zone		:	current time zone

time=Time.new
puts time.inspect
puts time.year     
puts time.month   
puts time.day
puts time.wday    
puts time.yday    
puts time.hour    
puts time.min     
puts time.sec     
puts time.usec    
puts time.zone    

-> time.to_a	:	generate result as array

-> We can use the Time object to get all information about timezones and daylight savings.

ruby test.rb
IST
19800
false
false
2018-04-10 15:54:26 +0530
2018-04-10 10:24:26 UTC
2018-04-10 15:54:26 +0530
2018-04-10 10:24:26 UTC

-> TIME FORMATTING DIRECTIVES : 

		%a	:	The abbreviated weekday name (Sun).
		%A	:	The full weekday name (Sunday).
		%b	:	the abbreviated month name
		%B	:	the full month name
		%c	:	the preferred local date and time representation
		%d	:	day of the month
		%H	:	Hour of the day (24 hours format)
		%I	:	Hour of the day (12 hours format)
		%j	:	day of the year
		%m	:	month of the year
		%M	:	minute of the hour
		%p	:	meridian indicator
		%S	:	second of the minute
		%U	:	week no of current year, start with 1st sunday as 1st day of 1st week.
		%W	:	week no of current year, start with 1st monday as 1st day of 1st week
		%w	:	day of the week
		%x	:	preferred reprongc software jobsesentation of date alone, no time
		%X	:	preferred representation of time alone, no date
		%y	:	year without a century
		%Y	:	year with century
		%z	:	time zone name
		%%	:	literal % character

******************** EXCEPTIONAL HANDLING ****************

When an exception is raised but not handled, global variable $! contains the current exception and $@ contains the current exception's backtrace.

begin     
    puts 'Before the raise.'     
    raise 'An error occured.'     
    puts 'After the raise.'     
  rescue     
    puts 'Code rescued.'     
end     


'The Exception class defines two methods that return details about the exception. The message method returns a string that define the explanation of error. The backtrace method returns an array of string that represent the call stack at that point where exception was raised.

redo statement	:	code  from begin block

begin   
   x = Dir.mkdir "alreadyExist"   
   if x   
      puts "Directory created"   
   end   
rescue   
   y = "newDir"   
   retry   
end   

ruby test.rb
directory created

-> ENSURE CLAUSE	:	always executed wheter exception is raised or not and is palced after the last rescue clause.

begin   
  raise 'Exception'   
rescue Exception    
  puts "e.message"   
 # puts e.backtrace.inspect   
ensure   
  puts "The ensure code will always run"   
end  	

ruby test.rb
e.message
The ensure code will always run

-> ELSE Clause	:	it is always presented after the rescue clause and before the ensure clause. If no exceptions are raised then only else  block is executed.


-> Catch and throw are more faster than raise and rescue so they are more preferred.

throw :lablename  
#.. this  code will not be executed  
catch :lablename do  
#.. matching catch will be executed after a throw is encountered.  
end  

******************************* FILE HANDLING *************************************

-> Creating 	:	File.new("file_name","modifier")
modifiers 	:	r / w / w+ / a+

File.new("demo.txt","w+")


irb
2.4.2 :001 > a=File.open("demo.txt","a+") 
 => #<File:demo.txt> 
2.4.2 :002 > a.puts("this is next line")
 => nil 
2.4.2 :003 > a.close
 => nil 
2.4.2 :004 > File.read("demo.txt")
 => "this is appended line\nthis is next line\n" 
2.4.2 :005 > 


require 'csv'
require 'byebug'
file = CSV.read('fst.csv')
CSV.foreach('fst.csv') do |row|
  puts row.inspect
end
byebug


require 'spreadsheet'
book = Spreadsheet::Workbook.new
sheet1=book.create_worksheet
sheet1.row(0).concat %w{ name, age}
sheet1.row(1).push 'tarun','22' 
sheet1.row(1).push 'tarun','21'
book.write 'asdf.xls'


