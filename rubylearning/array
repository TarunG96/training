Creating array with new keyword :
ary = Array.new				// no size given
ary = Array.new(4)			// array with initial size 4
ary = Array.new(3,"item")		// array with initial size 3 and data 'item' on all three positions

ACCESSING Array elements :
-> 	the [] method
	data[0] , data[-1] , data[4] , data [2,3]
-> 	the at method
	puts data.at(0) , data.at(3) , data.at(5)
->	slice method	:  works like [] method.
->	fetch method	:  used to provide a default value error for out of array range indicators.
	
eg :	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.fetch(10)  

        ruby test.rb
	test.rb:2:in `fetch': index 10 outside of array bounds: -7...7 (IndexError)
	from test.rb:2:in `<main>'
	
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.fetch(10,"na mila record")  
	
	ruby test.rb
	na mila record

->	first and last method   :   will return first and last record from array respectively.
->	take(n)		:  will return first n records from the array.
->	drop(n)		:  opposite of take method. Returns elements after n elements have been removed.


OBTAINING INFORMATION about an array    : 
->	length / count / size	:	returns length of array

-> 	arrayname.empty?	:	to check if the array has any elements or not i.e. it is empty or not.

->	arrayname.include?('data item') : to check if particular data item is in the array or not.


ADDING ELEMENTS TO ARRAY    : 
->	push or << method	:	items can be added to the end of arraay using this method.
eg: 	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	days.push(2)
	puts days<<("aaj")  

 	ruby test.rb
	Mon
	Tue
	Wed	
	Thu
	Fri
	Sat
	Sun
	2
	aaj

->	unshift method	:	with these method items can  be added to the beginning of the array.
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.unshift(2)

	ruby test.rb
	2
	Mon
	Tue
	Wed
	Thu
	Fri
	Sat	
	Sun

->	insert method	:	insert value at any position in array with the help of index.
	array.insert(index,"value")
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.insert(2,"hello")

	ruby test.rb
	Mon
	Sat
	Tue
	hello
	Wed
	Thu
	Fri
	Sun

	** We can add multiple  values also using insert method.

REMOVING elements from array : 
-> 	pop method	:	with this items are removed from the end of array and the removed item is returned.
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.pop
	
	ruby test.rb
	Sun

->	shift method	:	with this items are removed from the starting of array and the removed item is returned.
->	delete method	:	with this item can be removed from anywhere in the array and the removed item is returned.
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.delete("Tue")
->	uniq method	:	with this duplicate items can be removed returning the remaining array.
	days = ["Fri", "Sat", "Sun", "Sat"]   
	puts days.uniq  
->	compact method	:	to remove nil values from array


ITERATING OVER ARRAYS	:	
-> EACH METHOD	: Array has an 'each' method which decides what element should be iterated over and how. In case of Array's each 			  all elements in the Array instance are yielded to supplied block in sequence.
		* Each method takes two arguments - an element and a block.
		* The element contained inside the block is similar to a placeholder used in the block to represent each element of the array 			  in turn.
		* Block is the line of code that is executed on each of the array items.

arr = [1, 2, 3, 4, 5]
arr.each { |a| puts a+=3}

ruby test.rb
4
5
6
7
8

-> REVERSE_EACH METHOD	:   It will iterate over the array elements in reverse order.

-> MAP METHOD	:	It will create a new array based on oeiginal array but with values modified by the supplied block.

arr = [1, 2, 3, 4, 5]
arr.map{ |a| puts a+=3}
puts arr

ruby test.rb
4
5
6
7
8
1
2
3
4
5

SELECTING ITEMS from an Array : 

-> DESTRUCTIVE METHOD		:	modifies the array on which the method is called on.
-> NON DESTRUCTIVE METHOD	:	returns a new array with selected items and leaves the oroginal array unchanged.

select , reject       =>   non-distructive
select! , reject!     =>   destructive

NON DESTRUCTIVE SELECT :

arr = [34, 41, 31, 14, 25]
puts arr.select { |a| a > 30}
puts "\n"
puts arr.reject { |a| a > 30}
puts "\n"
puts arr

ruby test.rb
34
41
31

14
25

34
41
31
14
25

DESTRUCTIVE SELECT :

arr = [34, 41, 31, 14, 25]
puts arr.select! { |a| a > 30}
puts "\n"
puts arr.reject! { |a| a > 30}
puts "\n"
puts arr

 ruby test.rb
34
41
31


PUBLIC CLASS METHODS	:	[]*args    =>   returns a new array populated with the given objects.

puts Array['2','hello']
puts "\n"
puts [1,'sad','34']
puts "\n"
puts Array.[](3,'bye')

ruby test.rb
2
hello

1
sad
34

3
bye


-> Passing array as paramter 
	first = ["tarun","garg"]
	second = Array.new(first)
	puts first .eql? second

	ruby test.rb
	true

->	new(size) {|index| block }	:   Here, an array of given size is created. Each element in this array is created by passing the 						    element's indeex to the given block and storing the return value.
	second = Array.new(3){|index| index*3}
	puts second
	
	ruby test.rb
	0
	3
	6

-> try_convert(obj)	:	this method tries to convert obj into array. It returns array on success and nil if the obj cannot be 					converted into arrat for any reason.

		puts Array.try_convert([11])
		puts Array.try_convert("12")

	ruby test.rb
	11
			// nil 


PUBLIC INSTANCE METHODS :	

-> SET-INTERSECTION	:	Returns a new array containing the common elements in both arrays and excluding the duplicate ones.
				The order is preserved from the oroginal array.

-> array * int      =>   new array
-> array * string   =>   new string

puts [1,2,3] * 3
puts [1,2,3] * "ad"

ruby test.rb
1
2
3
1
2
3
1
2
3
1ad2ad3

-> array1 + array2    =>    New Array
-> array1 - array2    =>    New Array

-> array1 <=> array2   =>    -1, 0, +1 or nil     // nil is returned if the two values are incomparable.
		       ** Two arrays are equal iff both of same length and have exactly same elements of same value.
-> array1 == array2    => returns boolean true or false

-> array[index]         = obj 				=> obj
-> array[start, length] = obj or other_array or nil 	=> obj or other_array or nil
-> array[range]         = obj or other_array or nil 	=> obj or other_array or nil

data = [1,2,3,"hello","tarun",6,"demo",9]
data[0]="zero"
data[2..4] = [2,3,4]
data[6] = "six"
puts data

ruby test.rb
zero
2
2
3
4
6
sixSearches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==.

Returns the first contained array that matches (that is, the first associated array), or nil if no match is found.


9

-> assoc(obj)	=>	new_array or nil : searches through an array whose elements are also arrays comparing obj with the first element of 						   each contained array using obj.==.	
					   Returns the first contained array that matches (that is, the first associated array), or nil if no 						   match is found.

array1 = [ "colors", "red", "blue", "green" ]
array2 = [ "letters", "a", "b", "c" ]
res = [ array1, array2]
puts res.assoc("colors")  
     
ruby test.rb
colors
red
blue
green

-> bsearch {|x| block } â†’ element   : binary search : can be used in two cases : a find minimum mode and find any mode. In either case, the 					      elements of the array must be sorted.
  In find minimum mode, the block must return true or false and there must be an index.

array = [ 1,2,5,45,34,2,32,56 ]
puts array.bsearch { |x| x>=20 }
puts array.bsearch { |x| x<=20 }

ruby test.rb
45


  In find any mode, the block must return a number and there must be two indices i and j (0<=i<=j<=array.size)
  **he block returns a positive number for array if 0 <= k < i,
  **the block returns zero for array if i <= k < j, and
  **the block returns a negative number for array if j <= k < array.size.

-> clear 	: removes all  elements from self.




