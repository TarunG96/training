What is Ruby and features of Ruby.

Naming conentions in Ruby : 

Constant: 		Starts with a capital letter.
Global variable: 	Starts with a dollar sign ($).
Instance variable: 	Starts with a (@) sign.
Class variable: 	Starts with a (@@) sign.
Method name: 		Allowed to start with a capital letter.

INSTALLATION : sudo apt-get install ruby-full.

To see the installed Ruby version :

dell@dell-Latitude-E6520:/$ ruby -v
ruby 2.4.2p198 (2017-09-14 revision 59899) [i686-linux]
dell@dell-Latitude-E6520:/$ 

INSTALLING RVM	:

sudo apt-get install software-properties-common

ADDING PPA and INSTALLING the PACKAGE :

sudo apt-add-repository -y ppa:rael-gc/rvm
sudo apt-get update
sudo apt-get install rvm

rvm installl ruby RUBY VERSIONS :

ruby - MRI ruby (The Gold Standard)
ironruby - a .NET ruby
jruby - Java implementation of the ruby
macruby - implementation of ruby 1.9 directly on top of macOS core technologies
maglev - 64-bit implementation on top of VMware's GemStone
mruby - lightweight ruby
opal - ruby to JavaScript compiler
rbx - Rubinius - a next generation virtual machine VM for ruby
topaz - high performance ruby, written in RPython


TO switch between ruby versions : rvm use INTERPRETER[-VERSION]

HEllo world program 

puts "hello world" 
save the file as file_name.rb 

----To get input from user gets.chomp 

OPERATORS : 

-> UNARY	: accept a single operator to run 
		  !	Boolean NOT
		  ~	Bitwise complement
		  +	Unary plus
puts "hello world" 
puts (5)
puts (~5)

dell@dell-Latitude-E6520:~/training/rubylearning$ ruby test.rb
hello world
5
-6

-> ARITHEMETIC	: take numerical values as operands and return them as single values.

+	Adds values from both sides of the operator.
-	Subtract values from both sides of the operator.
/	Divide left side operand with right side operand.
*	Multiply values from both sides of the operator.
**	Right side operand becomes the exponent of left side operand.
%	Divide left side operand with right side operand returning remainder.

puts "hello world" 
puts (5+5)
puts (10-5)
puts (10*5)
puts (10/5)
puts (2**5)
puts (10%3)

ruby test.rb
hello world
10
5
50
2
32
1

->BITWISE OPERATORS : work on bits operands.

&	AND operator
|	OR operator
<<	Left shift operator
>> 	Right shift operator
^	XOR operator
~	Complement operator

->LOGICAL OPREATORS : work on bits operands.

&&	AND operator
||	OR operator

->TERNARY OPREATOR	:	These operators first check whether the condition is true or not and then execute the condition.
				?:	conditional expression.

puts "hello world" 
puts("Ternary operator")   
puts(2<5 ? 5:2)   
puts(5<2 ? 5:2)   

ruby test.rb
hello world
Ternary operator
5
2

->ASSIGNMENT OPERATOR	:	tHESE operator assigns a value to the operand.

=	Simple assignment operator
+=	Add assignment operator
-=	subtract assignment operator
*=	Multiply assignment operator
/=	Divide assignment operator
%=	Modulus assignment operator
**=	Exponential assignment operator

->COMPARISION OPERATORS	:	these compare the values of two operands.

==	Equal operator
!=	Not equal operator
>	left operand is greater than right operand
< 	Right operand is greater than left operand
>=	Left operand is greater than or equal to right operand
<=	Right operand is greater than or equal to left operand
<=>	Combined comparison operator
.eql?	Checks for equality and type of the operands
equal?	Checks for the object ID

puts "hello world" 
 puts(2 == 5)   
 puts(2 != 5)   
 puts(2 > 5)   
 puts(2 < 5)   
 puts(2 >= 5)   
 puts(2 <= 5)   

ruby test.rb
hello world
false
true
false
true
false
true

->RANGE OPREATOR	:	Range operators create a range of successive values consisting of a start, end and range of values in between.
			The (..) creates a range including the last term and (...) creates a range excluding the last term.
			For example, for the range of 1..5, output will range from 1 to 5.
			and for the range of 1...5, output will range from 1 to 4.

VARIABLES	 
->  LOCAL 	:  starts with lowercase or underscore. scope is only within the block where its initialized.
		   when uninitialized local variables are called, they are interpreted as call to a method that has no arguments.

->  CLASS	:  starts with @@ sign. Need to be initialized before use.
		   class variable belongs to the whole class and can be used anywhere in the class. If value changed at one instance,it's 			   changed at every instance. It is shared by all descendatns of the class.

->  INSTANCE	:  starts with @ sign. It belongs to one instance of the class and can be accesed from any instance of the class within a 			   method. They have only limited access to a particular instance of a class. Don't need to be initialized.

->  GLOBAL	:  starts with $ sign, can be accesed from anywhere in a program. An uninitialized global variable will have null value.


DATA TYPES IN RUBY : 

-> NUMBERS	:  intergers and floating point numbers.
		   Fixnum			They are normal numbers				1
		   Bignum			They are big numbers				111111111111
		   Float			Decimal numbers					3.0
		   Complex			Imaginary numbers				4 + 3i
		   Rational			They are fractional numbers			9/4
		   BigDecimal			Precision decimal numbers			6.0

puts "hello world"
puts (3+2)
puts (3.0+2)
puts (10/2)
puts (10.0/2)
puts ((3/2)/2)

ruby test.rb
hello world
5
5.0
5
5.0
0

-> STRINGS	:  defined by eclosing a text between single(') or double quotes(").

puts "hello"+" world"
puts "1" + "2"
puts "5" * 2

ruby test.rb
hello world
12
55

-> SYMBOLS	: these are like strings and are preceeded by colon (:). Symbols containing multiple words are written with (_). One 			  difference between string and symbol is that, if text is a data then it is a string but if it is a code it is a symbol.
		  Symbols are unique identifiers and represent static values, while string represent values that change.

puts "hello".object_id
puts "hello".object_id
puts :hello.object_id
puts :hello.object_id

ruby test.rb
78161540
78161350
459058
459058

-> HASHES	:  A hash assign its values to its keys. They can be looked up by their keys. Value to a key is assigned by => sign. A 			   key/value pair is separated with a comma between them and all the pairs are enclosed within curly braces.

sample={"tarun"=>"garg","nikhil"=>"batra","sapna"=>"chauhan"}
puts sample["tarun"]
puts sample["nikhil"]
puts sample["sapna"]

ruby test.rb
garg
batra
chauhan

->ARRAYS	:  An array stroes data or list of data. It can contain all types of data. Data in an array are separated by comma in between 			   them and are enclosed by square bracket.

sample=["tarun","garg","nikhil","batra","sapna","chauhan"]
puts sample[0]
puts sample[3]
puts sample[5]

ruby test.rb
tarun
batra
chauhan

BACKSLASH NOTATIONS IN RUBY	:
		\n			Newline 
		\r			Carriage return 
		\f			Formfeed 
		\b			Backspace
		\a			Bell 
		\e			Escape
		\s			Space 
		\nnn			Octal notation (n being 0-7)
		\xnn			Hexadecimal notation (n being 0-9, a-f, or A-F)
		\cx, \C-x		Control-x
		\M-x			Meta-x (c | 0x80)
		\M-\C-x			Meta-Control-x
		\x			Character x

DEFINING CLASS	: class 'classname' 
		  end
CREATING OBJECTS : ob1 = classname.new
		   ob2 = classname.new
CUSTOM METHOD TO CREATE RUBY OBJECTS : we can pass parameteres to method new and these parameters can be used to initialize class variables.
				       For this, we need to declare the method 'initialize' at the time of class creation. It is a special 					       method which will be executed when the new method is callled with parameters.
class Customer
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
end

ob1=Customer.new("1","tarun","faridabad")

DEFINING FUNCTIONS IN RUBY  : start with 'def' and end with 'end' keywords.
class Sample
   def hello
      puts "Hello Ruby!"
   end
end
object = Sample. new
object.hello

COMMENTS :
Single line - preceded by #
multiline  -  written between =begin and =end

CONDITIONAL STATEMENTS :
->IF		:	if(condition)
			//block of code
			end

->IF-ELSE	:	if(condition)
			//block of code
			end
->ELSEIF	:	if(condition)
			//statements
			elseif(condition)
			//statements
			elseif(condition)
			//statements
			else
			//statements
x=10
if x<5
   x=6
elseif x%2==0
   puts("yes")
else
   puts("no condition matc")
end

->IF MODIFIER	:	//code if condition
$x=1
puts "hello" if $x==1

ruby test.rb
hello

->UNLESS	:	unless condition
			//code
			else
			//code

$x=10
unless $x>2
   puts "x is greater than 2"
else
   puts "x is less than 2"

end

ruby test.rb
x is less than 2

-> UNLESS MODIFIER	: 	//code unless condition 

-> CASE			:	Similar to switch of C language
				
case exression
when expression [then]
     code
when expression [then]
     code
else
     dode
end

puts "enter a value between 1 to 4"
value=gets.chomp.to_i
case value
when 1
   puts "one"
when 2
   puts "two"
when 3
   puts "three"
when 4
   puts "four"
else
   puts"invalid choice"
end

ruby test.rb
enter a value between 1 to 4
3
three
dell@dell-Latitude-E6520:~/training/rubylearning$ ruby test.rb
enter a value between 1 to 4
2
two

SIMPLE CALCULATOR PROGRAM : 
puts "A SIMPLE CALCULATOR "
   puts "enter two numbers"
   value1=gets.chomp.to_f
   value2=gets.chomp.to_f
   puts"Enter your choice"
   puts"1. ADDITION"
   puts"2. SUBTRACTION"
   puts"3. MULTIPLICATION"
   puts"4. DIVISION"
   choice=gets.chomp.to_i
   case choice
   when 1
      res=value1+value2
      puts(res)
   when 2
      res=value1-value2
      puts (res)
   when 3
      res=value1*value2   
      puts (res)
   when 4
      res=value1/value2
      puts (res)
   else
      puts"invalid choice"
      end

ruby test.rb
A SIMPLE CALCULATOR 
enter two numbers
1234
2342
Enter your choice
1. ADDITION
2. SUBTRACTION
3. MULTIPLICATION
4. DIVISION
1
3576.0

LOOPS =>
->FOR LOOP : for [variable] in [expresssion][do]	
	     	code
	     end

puts "testing for loop"
a=gets.chomp.to_i					//  for loop using range
for i in 0..a do
    puts(i)
end

ruby test.rb
testing for loop
5
0
1
2
3
4
5

puts "testing for loop"					//  for loop using array
a=["a","b","c","d","e"]
for i in a do
   puts(i)
end

ruby test.rb
testing for loop
a
b
c
d
e

-> WHILE LOOP 	: It is generally used in conditions where  we do not know about the number of iterations.
		  while [conditional] do
			code
		  end
puts "testing while loop"
puts "enter first number"
a=gets.chomp.to_i
puts "enter second number"
b=gets.chomp.to_i
while a<b do
  puts(a)
  a+=1
end

ruby test.rb
testing while loop
enter first number
2
enter second number
7
2
3
4
5
6

-> WHILE MODIFIER :  begin
			code 
		     end while [condition]

puts "testing while modifier"
puts "enter first number"
a=gets.chomp.to_i
puts "enter second number"
b=gets.chomp.to_i
puts "loop begins here"
begin
   puts(a)
   a+=1
end while a<b

ruby test.rb
testing while modifier
enter first number
2
enter second number
7
loop begins here
2
3
4
5
6

-> DO WHILE	:	loop do
			   code to be executed
			   break if boolean expression
			end

puts "testing while modifier"
x=10
loop do
       puts(x)
       x+=1
       break if x>20
     end

ruby test.rb
testing while modifier
10
11
12
13
14
15
16
17
18
19
20

-> UNTIL LOOP : It runs until condition becomes true. It is just opposite of while loop.
		until [conditional]
		    code to be executed
		end

x=1
until x==10
   puts (x*2)
   x+=1
end

ruby test.rb
2
4
6
8
10
12
14
16
18

-> BREAK 	:	Break statement is used to terminate a loop or a block of code.

for x in 2..8
   if x==5 then
      break
   end
   puts (x)
end

ruby test.rb
2
3
4


-> NEXT		:	Next statement is used to skip loop's next iteration. Once executed, no further iteration will ne performed.

for x in 2..8
   if x==5 then
      next
   end
   puts (x)
end

ruby test.rb
2
3
4
6
7
8

-> REDO		:	Used to repeat the current iteration of loop. Executed without evaluating the loop's condition. Used inside a loop.
-> RETRY	:	used to repeat the whole loop iteration from the start.


ARRAYS	:	ordered collection of data.
		-1 indicates last element of array.
		0 indiacates first element of array.

-> Using literal construct  :  
	eg   :   data = [1,2,'a','b',5]
-> Using new class method  :  A Ruby array is constructed by calling 'new' method with zero, one or more than one arguments.
	eg   :   ArrayName = Array.new
		 arrayname = Array.new(10)	//Array of size 10

ACCESSING Array elements :
-> 	the [] method
	data[0] , data[-1] , data[4] , data [2,3]
-> 	the at method
	puts data.at(0) , data.at(3) , data.at(5)
->	slice method	:  works like [] method.
->	fetch method	:  used to provide a default value error for out of array range indicators.
	
eg :	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.fetch(10)  

        ruby test.rb
	test.rb:2:in `fetch': index 10 outside of array bounds: -7...7 (IndexError)
	from test.rb:2:in `<main>'
	
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.fetch(10,"na mila record")  
	
	ruby test.rb
	na mila record

->	first and last method   :   will return first and last record from array respectively.
->	take(n)		:  will return first n records from the array.
->	drop(n)		:  opposite of take method. Returns elements after n elements have been removed.


ADDING ELEMENTS TO ARRAY    : 
->	push or << method	:	items can be added to the end of arraay using this method.
eg: 	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	days.push(2)
	puts days<<("aaj")  

 	ruby test.rb
	Mon
	Tue
	Wed	
	Thu
	Fri
	Sat
	Sun
	2
	aaj

->	unshift method	:	with these method items can  be added to the beginning of the array.
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.unshift(2)

	ruby test.rb
	2
	Mon
	Tue
	Wed
	Thu
	Fri
	Sat	
	Sun

->	insert method	:	insert value at any position in array with the help of index.
	array.insert(index,"value")
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.insert(2,"hello")

	ruby test.rb
	Mon
	Tue
	hello
	Wed
	Thu
	Fri
	Sat
	Sun

REMOVING elements from array : 
-> 	pop method	:	with this items are removed from the end of array and the removed item is returned.
	days = ["Mon", "Tue",
 "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.pop
	
	ruby test.rb
	Sun

->	shift method	:	with this items are removed from the starting of array and the removed item is returned.
->	delete method	:	with this item can be removed from anywhere in the array and the removed item is returned.
	days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]   
	puts days.delete("Tue")
->	uniq method	:	with this duplicate items can be removed returning the remaining array.
	days = ["Fri", "Sat", "Sun", "Sat"]   
	puts days.uniq  





